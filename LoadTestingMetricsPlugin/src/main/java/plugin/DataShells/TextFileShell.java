package plugin.DataShells;

import org.springframework.stereotype.Component;
import plugin.Abstractions.DataShell;
import plugin.DTO.Metrics;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;

@Component
public class TextFileShell implements DataShell {


    @Override
    public InputStream GetCurrentReport(Metrics metrics) {

        StringBuilder report = new StringBuilder();

        report.append("üìä –û—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n");
        report.append("------------------------------------\n");
        report.append(String.format("‚è± –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: %.2f ms\n", metrics.get_httpReqDurationAvg()));
        report.append(String.format("‚è± P95 –∑–∞–¥–µ—Ä–∂–∫–∞:     %.2f ms\n", metrics.get_httpReqDurationP95()));
        report.append(String.format("‚è± –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:     %.2f ms\n", metrics.get_httpReqDurationMax()));
        report.append("\n");

        report.append(String.format("üîÅ –ö–æ–ª-–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π:        %d\n", metrics.get_iterationsCount()));
        report.append(String.format("üåê –ö–æ–ª-–≤–æ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤:   %d\n", metrics.get_httpReqsCount()));
        report.append(String.format("‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:       %d\n", metrics.get_checksPasses()));
        report.append(String.format("‚ùå –û—à–∏–±–∫–∏ HTTP:             %.2f\n", metrics.get_httpReqFailedValue()));
        report.append("\n");

        report.append(String.format("üì• –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:         %d –ö–ë\n", metrics.get_dataReceivedCount()));
        report.append(String.format("üë• –ú–∞–∫—Å–∏–º—É–º VUs:            %d\n", metrics.get_vusMaxValue()));
        report.append(String.format("‚åõ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:   %.2f ms\n", metrics.get_httpReqWaitingMax()));

        return new ByteArrayInputStream(report.toString().getBytes(StandardCharsets.UTF_8));
    }


    @Override
    public InputStream GetAllTimeReport(List<Metrics> metricsList) {

        StringBuilder txt = new StringBuilder();

        txt.append("–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–ø—É—Å–∫–æ–≤\n");
        txt.append("=====================\n\n");

        int index = 1;
        for (Metrics m : metricsList) {
            double errorPercent = m.get_httpReqFailedValue() * 100;

            txt.append(String.format("–ó–∞–ø—É—Å–∫ #%d\n", index++));
            txt.append(String.format("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞:      %.2f ms\n", m.get_httpReqDurationAvg()));
            txt.append(String.format("P95 –∑–∞–¥–µ—Ä–∂–∫–∞:          %.2f ms\n", m.get_httpReqDurationP95()));
            txt.append(String.format("–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞:        %.2f ms\n", m.get_httpReqDurationMax()));
            txt.append(String.format("HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤:         %d\n", m.get_httpReqsCount()));
            txt.append(String.format("–ò—Ç–µ—Ä–∞—Ü–∏–π:              %d\n", m.get_iterationsCount()));
            txt.append(String.format("–ü—Ä–æ–≤–µ—Ä–∫–∏ (—É—Å–ø–µ—à–Ω—ã–µ):   %d\n", m.get_checksPasses()));
            txt.append(String.format("–û—à–∏–±–∫–∏ HTTP:           %.2f%%\n", errorPercent));
            txt.append(String.format("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:       %d –ö–ë\n", m.get_dataReceivedCount()));
            txt.append(String.format("–ú–∞–∫—Å. VUs:             %d\n", m.get_vusMaxValue()));
            txt.append(String.format("–ú–∞–∫—Å. –æ–∂–∏–¥–∞–Ω–∏–µ:        %.2f ms\n", m.get_httpReqWaitingMax()));
            txt.append("\n----------------------------------------\n\n");
        }

        return new ByteArrayInputStream(txt.toString().getBytes(StandardCharsets.UTF_8));
    }
}

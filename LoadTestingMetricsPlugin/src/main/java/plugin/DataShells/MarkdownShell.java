package plugin.DataShells;

import plugin.Abstractions.DataShell;
import plugin.DTO.Metrics;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;

public class MarkdownShell implements DataShell {
    @Override
    public InputStream GetCurrentReport(Metrics metrics) {

        StringBuilder md = new StringBuilder();

        md.append("# üìÑ –û—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞\n\n");

        md.append("## üìä –ó–∞–¥–µ—Ä–∂–∫–∏\n");
        md.append(String.format("- **–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞:** `%.2f ms`\n", metrics.get_httpReqDurationAvg()));
        md.append(String.format("- **P95 –∑–∞–¥–µ—Ä–∂–∫–∞:** `%.2f ms`\n", metrics.get_httpReqDurationP95()));
        md.append(String.format("- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:** `%.2f ms`\n\n", metrics.get_httpReqDurationMax()));

        md.append("## üîÅ –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        md.append(String.format("- **–ò—Ç–µ—Ä–∞—Ü–∏–∏:** `%d`\n", metrics.get_iterationsCount()));
        md.append(String.format("- **HTTP-–∑–∞–ø—Ä–æ—Å—ã:** `%d`\n", metrics.get_httpReqsCount()));
        md.append(String.format("- **–ü—Ä–æ–≤–µ—Ä–∫–∏ (—É—Å–ø–µ—à–Ω—ã–µ):** `%d`\n", metrics.get_checksPasses()));
        md.append(String.format("- **–û—à–∏–±–∫–∏ HTTP:** `%.2f`\n\n", metrics.get_httpReqFailedValue()));

        md.append("## üì• –û–±—ä—ë–º –∏ –Ω–∞–≥—Ä—É–∑–∫–∞\n");
        md.append(String.format("- **–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:** `%d –ö–ë`\n", metrics.get_dataReceivedCount()));
        md.append(String.format("- **–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** `%d`\n", metrics.get_vusMaxValue()));
        md.append(String.format("- **–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:** `%.2f ms`\n", metrics.get_httpReqWaitingMax()));

        return new ByteArrayInputStream(md.toString().getBytes(StandardCharsets.UTF_8));
    }

    @Override
    public InputStream GetAllTimeReport(List<Metrics> metricsList) {
        StringBuilder md = new StringBuilder();

        md.append("# üìà –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–ø—É—Å–∫–æ–≤\n\n");
        md.append("| ‚Ññ | –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (ms) | P95 (ms) | –û—à–∏–±–∫–∏ (%) | –ó–∞–ø—Ä–æ—Å–æ–≤ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π |\n");
        md.append("|---|------------------------|----------|------------|----------|----------------|\n");

        int index = 1;
        for (Metrics m : metricsList) {
            double errorPercent = m.get_httpReqFailedValue() * 100;
            md.append(String.format(
                    "| %d | %.2f | %.2f | %.2f%% | %d | %d |\n",
                    index++,
                    m.get_httpReqDurationAvg(),
                    m.get_httpReqDurationP95(),
                    errorPercent,
                    m.get_httpReqsCount(),
                    m.get_vusMaxValue()
            ));
        }

        return new ByteArrayInputStream(md.toString().getBytes(StandardCharsets.UTF_8));
    }
}
